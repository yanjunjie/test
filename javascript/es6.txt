//***********************Rest Parameter [ …rest]**********************
It is a collection of all remaining elements (hence, the name rest) into an array or object

let myFuncRest = (a, b, ...args) => {
	console.log(a);
	console.log(b);
	console.log(args);
}

myFuncRest(1,2,3,4,5);
	
Destructuring Rest Parameters:
function myFuncDes(...[x, y, z]) {
   return x * y* z;
}

console.log(myFuncDes(1)); // NaN
console.log(myFuncDes(1, 2, 3));   // 6
console.log(myFuncDes(1, 2, 3, 4)); // 6 (but fourth parameter is not destructured)

function myFuncDes(a, ...[x, y, z]) {
	console.log(a); // 1
	console.log(x); // 2
	console.log(y); // 3
	return x * y* z;
}

console.log(myFuncDes(1, 2, 3, 4)); // 24 (Now fourth parameter is destructured)

var myName = ["Marina" , "Magdy" , "Shafiq"] ;
const [firstName , ...familyName] = myName ;
console.log(firstName); // Marina ;
console.log(familyName); // [ "Magdy" , "Shafiq"] ;
let {a:customVar, b, ...rest} = {a: 10, b: 20, c: 30, d: 40};
console.log(rest); // {c: 30, d: 40}

	
//***********************Spread Operator […spread]*****************************
It’s the opposite to rest parameter, where rest parameter collects items into an array, the spread operator unpacks the collected elements into single elements.

function myFuncSpread(x, y, ...params) { // used rest parameter here
  console.log(x); // "a"
  console.log(y); // "b"
  console.log(params); // ["c", "d", "e", "f"]
}

var inputs = ["a", "b", "c", "d", "e", "f"];
myFuncSpread(...inputs); // used spread operator here

const x = ['a', 'b', 'c'];
const y = ['e', 'f', 'g'];
const z = [...x, 'd', ...y];
console.log(z); // ['a', 'b', 'c', 'd', 'e', 'f', 'g']

// Arguments: 
Ref: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/arguments
To make an real array from the array-like-object

let args = Array.from(arguments);
// or
let args = [...arguments];

function func1(a, b, c) {
  console.log(arguments[0]); // expected output: 1
  console.log(arguments[1]); // expected output: 2
  console.log(arguments[2]); // expected output: 3
}

func1(1, 2, 3);


//************************Destructuring Assignments***********************
We can pull out objects properties or arrays elements into distinct variables

// Array Destructuring:

let [a, b, ...rest] = [10, 20, 30, 40, 50];
console.log(rest); // [30,40,50]

// Object Destructuring:

let {a, b, ...rest} = {a: 10, b: 20, c: 30, d: 40}
console.log(rest); // {c: 30, d: 40}
let {a:customVar, b, ...rest} = {a: 10, b: 20, c: 30, d: 40};
console.log(customVar); // 10
console.log(a); // 10 
console.log(b); // 20 
console.log(rest); // { c: 30, d: 40 }
let state = {a: 10, b: 20, c: 30, d: 40};
console.log({...state});

// Merging of Objects (Shallow-cloning) instead of Object.assign() using Spread Operator:

var obj1 = { foo: 'bar', x: 42 };
var obj2 = { foo: 'baz', y: 13 };

var clonedObj = { ...obj1 };
console.log(clonedObj); // Object { foo: "bar", x: 42 }

var mergedObj = { ...obj1, ...obj2 };
console.log(mergedObj); // Object { foo: "baz", x: 42, y: 13 }


//****************Object.values and Object.Keys*******************

// Object.values: returns an array of Objects's values
const users = {123: {uid: 123},456: {uid: 456}};
const currId = 123;
const userIds = Object.values(users)
            .reduce((a, {uid}) => uid !== currId ? a.concat(uid): a, [])
console.log(userIds)

// Object.keys: returns an array of Object's keys
ownKeys = Object.keys(users);
console.log(ownKeys); // ["123", "456"]


//*****************************Generator******************************//
1. A generator is a function that can stop midway and then continue from where it stopped. The function works like yield-resume-yield... loop just before finish. We don’t have a return but yield “returns” the value.
2. Better Async functionality instead of Promise/Callback (async/await).
3. It returns the next state (yield value) by calling next() function
4. The most important thing is a generator returns an Iterator when we call the generator function


// Example 01

function * generatorFunction() { 
  console.log('This will be executed first.');
  yield 'Hello, ';
  console.log('I will be printed after the pause');  
  yield 'World!';
  if (Math.random() > 0.5) return;
  yield 'Finished'
}

const generatorObject = generatorFunction(); // retrun an Iterator
console.log(generatorObject.next().value); // Hello,
console.log(generatorObject.next().value); // World!
console.log(generatorObject.next().value); // Finished
console.log(generatorObject.next().value); // undefined


// Example 02

function * iterableObj() {
  yield 'This';
  yield 'is';
  yield 'iterable.'
}

console.log(iterableObj().next().value); // This

for (const val of iterableObj()) {
	console.log(val);
}


// Example 03

function * naturalNumbers() {
  let num = 1;
  while (true) {
    yield num;
    num = num + 1
  }
}

const numbers = naturalNumbers();
console.log(numbers.next().value) // 1
console.log(numbers.next().value) // 2


// Example 04

function * take(n, iter) {
  let index = 0;
  for (const val of iter) {
    if (index >= n) {
      return;
    }
    index = index + 1;
    yield val;
  }
}


// Example 05

function* fibonacci() { // a generator function
  let [prev, curr] = [0, 1];
  while (true) {
    [prev, curr] = [curr, prev + curr];
    yield curr;
  }
}

for (const n of fibonacci()) {
  console.log(n);
  // truncate the sequence at 1000
  if (n >= 1000) {
    break;
  }
}


// Example 06

const gen = (function *(){
  yield 1;
  yield 2;
  yield 3;
})();
for (const o of gen) {
  console.log(o);
  break;  // Closes iterator
}

// The generator should not be re-used, the following does not make sense!

for (const o of gen) {
  console.log(o); // Never called.
}


//******************Symbol.Iterator/Iterators*******************
The Symbol.iterator is a function and the symbol specifies the default iterator for an object. Used by for...of.


// Example 01

const iterable1 = new Object();

iterable1[Symbol.iterator] = function* () {
  yield 1;
  yield 2;
  yield 3;
};

console.log([...iterable1]);
expected output: Array [1, 2, 3]

N.B: Here by this way, we can not call next() method like this iterable1.next().value. It's just been an iterable.
But only generator gives that capability in the following example.


// Example 1.1.0

iterable2 = function* () {
  yield 1;
  yield 2;
  yield 3;
};

console.log(iterable2().next().value);
console.log(...iterable2());


// Example 02

class Foo {
  *[Symbol.iterator] () {
    yield 1;
    yield 2;
    yield 3;
  }
}

const someObj = {
  *[Symbol.iterator] () {
    yield 'a';
    yield 'b';
  }
}

[...new Foo] // [ 1, 2, 3 ]
[...someObj] // [ 'a', 'b' ]


// Example 03:

let range = {
  from: 1,
  to: 5
};

// 1. call to for..of initially calls this
range[Symbol.iterator] = function() {

  // ...it returns the iterator object:
  // 2. Onward, for..of works only with this iterator, asking it for next values
  return {
    current: this.from,
    last: this.to,

    // 3. next() is called on each iteration by the for..of loop
    next() {
      // 4. it should return the value as an object {done:.., value :...}
      if (this.current <= this.last) {
        return { done: false, value: this.current++ };
      } else {
        return { done: true };
      }
    }
  };
};

// now it works!
for (let num of range) {
  //console.log(num); // 1, then 2, 3, 4, 5
}


//**************Iterators and Generators********************
const iterableObjUsingSymbolI = {
  [Symbol.iterator]() {
    let step = 0;
    return {
      next() {
        step++;
        if (step === 1) {
          return { value: 'This', done: false};
        } else if (step === 2) {
          return { value: 'is', done: false};
        } else if (step === 3) {
          return { value: 'iterable.', done: false};
        }
        return { value: '', done: true };
      }
    }
  },
}

for (const val of iterableObjUsingSymbolI) {
  //console.log(val);
}

// Expected result:
// This
// is 
// iterable.

// Here’s the same thing using generators —
function * iterableObj() {
  yield 'This';
  yield 'is';
  yield 'iterable.'
}

for (const val of iterableObj()) {
   console.log(val);
}

// Expected Result:
// This
// is 
// iterable.


You can compare both the versions. It’s true that this is some what of a contrived example. But it does illustrate the points

1. We don’t have to worry about Symbol.iterator
2. We don have to implement next().
3. We don’t have to manually make the return object of next() i.e { value: 'This', done: false }.
4. We don’t have to save the state. In the iterator’s example, the state was saved in the variable step. It’s value defined what was output from the iterable. We had to do nothing of this sort in the generator.





