//**************************** Local Scope/Encapsulation ****************************
In object-oriented programming, encapsulation refers to the bundling of data with the methods that operate on that data, or the restricting of direct access to some of an object's components.
In javascript, it does allow for some of their main features, including data hiding, which is one of the main consequences of encapsulation.

The following is a common pattern for creating Javascript modules:

obj = (function(){

    var obj1 = {...}
    var obj2 = {...}

    var func3 = function(){...};
    var func4 = function(){...};

    return {
        subobj1: obj1,
        subobj2: obj2,
        subobj3: {
            func3: func3,
            func4: func4
        }
    }
}());

In this example, the inner functions can access obj1, obj2, func3 and func4 directly from their variables. The self-calling function makes so these inner variables are private and hidden from the outside and the return statement allows you to export only the functions that you want to make public.

//***************************** Prototype ******************************

# 01. Object.setPropertyOf(Animal, cat)
animal.isPropertyOf(obj)

Example 01:
const Animal = {
  speak() {
    console.log(this.name + ' makes a noise.');
  }
};

class Dog {
  constructor(name) {
    this.name = name;
  }
}

// If you do not do this you will get a TypeError when you invoke speak
Object.setPrototypeOf(Dog.prototype, Animal);

let d = new Dog('Mitzie');
d.speak(); // Mitzie makes a noise.

# 02. Object.create(obj1) like new keyword in OOP
# 03. Object.assign() like interface in OOP
# 04. prototypeObj.isPrototypeOf(object)


//************************* Function composition by enabling pipe functionality (piping) ***************************
const double = x => y => x + y;
const x = 2;
const y = 2;
const doubleX = double(x);
const doubleY = doubleX(y);
console.log(doubleY);

// Expected result: 4


//************************* Creating a map in javascript with array of values dynamically ***************************
Hash table is one of the most important data structures in computing. A hash table (hash map) is a data structure used to implement an associative array, a structure that can map keys to values.
While many programming languages support associative arrays (hash tables or arrays with named indexes), JavaScript does not. In JavaScript arrays use numbered indexes. But we can get the flavor more like

    | name  | email           |
    | Jason | jason@email.com |
    | Joe   | joe@email.com   |
    | Zark  | zark@email.org  |

hashes:
[
  { name: 'Jason', email: 'jason@email.com' },
  { name: 'Joe', email: 'joe@email.com' },
  { name: 'Zark', email: 'zark@email.org' } 
]

Ref: 
https://medium.com/@yanganif/javascript-hash-table-8878afceecbc
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map

Example 01

I think this is what you are asking. addValueToList will create array/list dynamically if the key is not present in the map.

//initially create the map without any key
var map = {};

function addValueToList(key, value) {
    //if the list (item) is already created for the "key", then uses it
    //else creates new list for the "key" to store multiple values in it.
    map[key] = map[key] || []; // assigining an empty array to the key
    map[key].push(value); // as the key is an array so pushing other values to that array
}

addValueToList(1, 5);
addValueToList(2, 3);
addValueToList(2, 4);
console.log(map);

// Expected resutl:
{1: Array(1), 2: Array(2)} 

{
  1: [5]
  2: [3, 4]
}

Example 02

Every javascript object is a simple hashmap which only accepts string value as its key, so you could write your code as:

var map = {};
// add a item
map[key1] = value1;
// or remove it
delete map[key1];
// or determine whether a key exists
key1 in map;


// Example 03

let myMap = new Map();

// setting the values
myMap.set("1", 'value1');
myMap.set("2", 'value2');
myMap.set("3", 'value3');

myMap.size; // 3

// getting the values
myMap.get("1");    // "value associated with "value1"
myMap.get("2");       // "value associated with "value1"
myMap.get("3");      // "value associated with "value3"

Notice: key and value can be any type.


// Example 04

if (!Array.prototype.mapUsingReduce) {
  Array.prototype.mapUsingReduce = function(callback, thisArg) {
    return this.reduce(function(mappedArray, currentValue, index, array) {
      mappedArray[index] = callback.call(thisArg, currentValue, index, array)
      return mappedArray
    }, [])
  }
}

[1, 2, , 3].mapUsingReduce(
  (currentValue, index, array) => currentValue + index + array.length
) // [5, 7, , 10]






























