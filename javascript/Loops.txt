
//****************forEach Only for Array*************************
let mytest = ['id', 'bablu'];
mytest.forEach(function(element, key) {
  console.log(element); //id, bablu
});

Example 01:
var a = {
  "ip": "10.0.0.161",
  "port": 21,
  "banner": "",
  "status": "closed (timeout)"
};

var ele = document.getElementById("pingStatus");
Object.values(a).forEach(e => ele.textContent += e + "    ")
<p id="pingStatus" type="text"></p>


//******************** Difference between for...of and for...in***************************
Both for...in and for...of statements iterate over something. The main difference between them is in what they iterate over.
The for...in statement iterates over the enumerable properties of an object, in an arbitrary order.
The for...of statement iterates over iterable objects, including: built-in String, Array, array-like objects (e.g., arguments or NodeList), TypedArray, Map, Set, and user-defined iterables.


//***********************for..of is only for Array and we can use break, throw, return & continue statement******************************
Example 01:

let student = [10, 'bablu'];
for (const stProp of student)
console.log(stProp); //10, bablu

Example 02:

var myObj = [{"a": "1","b": null},{"a": "2","b": 5}]
var result = false

for(var call of myObj) {
    console.log(call)

    var a = call['a'], b = call['b']

    if(a == null || b == null) {
        result = false
        break
    }
}


//***********************for..in is enumerable over objects it aslo works on array*************************
let mytest = {'id':10, 'name':'bablu'}
for (myvar in mytest)
console.log(myvar); //id, name


//**************************for await...of statement***********************
The for-await-of statement creates a loop iterating over async iterable objects as well as on sync iterables, including: built-in String, Array, Array-like objects (e.g., arguments or NodeList), TypedArray, Map, Set, and user-defined async/sync iterables. It invokes a custom iteration hook with statements to be executed for the value of each distinct property of the object.

Example 01:

Example 02: Iterating over async generators
async function* asyncGenerator() {
  let i = 0;
  while (i < 3) {
    yield i++;
  }
}

for await (let num of asyncGenerator()) {
  console.log(num);
}

or

(async function() {
  for await (let num of asyncGenerator()) {
    console.log(num);
  }
})();
// 0
// 1
// 2















































