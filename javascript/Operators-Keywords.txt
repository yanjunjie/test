//*************************** the this keyword **********************
Ref: 
https://www.youtube.com/watch?v=AOSYY1_np_4
https://www.youtube.com/watch?v=NV9sHLX-jZU&t=505s

// Global Scope/Public Properties, like as a House. So in this house we have some properties like chair, table ...
'use strict'
this.table = 'Otobi computer table';
console.log(window.table); // Otobi computer table

const study = function() {
  console.log(`I'm studying on : ${this.table}`)	  	
}
study.call(this); // I'm studying on : Otobi computer table


this.companyWise = {
  otobi: {table:2, chair:3},
  samsung: {tv:1, phone: 2},
  totalChair() {
    console.log(`We have total otobi chairs: ${this.otobi.chair}`)	  	
  }
}
console.log(this.companyWise.otobi.table); // 2
So the above properties are public anyone can see or use those properties
console.log(this.companyWise.totalChair()); //We have total otobi chairs: 3


// Private Properties
let johnsRoom = {
  table: 'Otobi brightly colored table',
  study() {
    console.log(`John is studying on ${this.table}`)	  	
  }
}
console.log(johnsRoom.table); // Otobi brightly colored table
but we cant use like this console.log(this.johnsRoom.table);

console.log(johnsRoom.study()); // John is studying on Otobi brightly colored table


//************************in*********************
The in operator returns true if the specified property is in the specified object or its prototype chain.

Syntax:
prop in object

prop
A string or symbol representing a property name or array index.

object
Object to check if it (or its prototype chain) contains the property with specified name (prop).

Example 01:

const car = {make: 'Honda', model: 'Accord', year: 1998};

console.log('make' in car);
// expected output: true

delete car.make;
if ('make' in car === false) {
  car.make = 'Suzuki';
}

console.log(car.make);
// expected output: "Suzuki"

Example 02:

// Arrays
let trees = ['redwood', 'bay', 'cedar', 'oak', 'maple']
0 in trees        // returns true
3 in trees        // returns true
6 in trees        // returns false
'bay' in trees    // returns false (you must specify the index number, not the value at that index)
'length' in trees // returns true (length is an Array property)
Symbol.iterator in trees // returns true (arrays are iterable, works only in ES2015+)

// Predefined objects
'PI' in Math          // returns true

// Custom objects
let mycar = {make: 'Honda', model: 'Accord', year: 1998}
'make' in mycar  // returns true
'model' in mycar // returns true


//************************Object.prototype.hasOwnProperty()******************************
The hasOwnProperty() method returns a boolean indicating whether the object has the specified property as its own property (as opposed to inheriting it).
Unlike the in operator, this method does not check for a property in the object's prototype chain.

Syntax
obj.hasOwnProperty(prop)

prop
The String name or Symbol of the property to test.

Return value
A Boolean indicating whether or not the object has the specified property as own property.

Example 01:

const object1 = new Object();
object1.property1 = 42;

console.log(object1.hasOwnProperty('property1'));
// expected output: true

console.log(object1.hasOwnProperty('toString'));
// expected output: false

console.log(object1.hasOwnProperty('hasOwnProperty'));
// expected output: false

Example 02:

Direct vs. inherited properties
The following example differentiates between direct properties and properties inherited through the prototype chain:

o = new Object();
o.prop = 'exists';
o.hasOwnProperty('prop');             // returns true
o.hasOwnProperty('toString');         // returns false
o.hasOwnProperty('hasOwnProperty');   // returns false

Example 03:

var foo = {
  hasOwnProperty: function() {
    return false;
  },
  bar: 'Here be dragons'
};

foo.hasOwnProperty('bar'); // always returns false

// Use another Object's hasOwnProperty
// and call it with 'this' set to foo
({}).hasOwnProperty.call(foo, 'bar'); // true

// It's also possible to use the hasOwnProperty property
// from the Object prototype for this purpose
Object.prototype.hasOwnProperty.call(foo, 'bar'); // true


//*********************************getOwnPropertyNames()***********************************


//******************************* Return Statement ***************************************
The return statement is only valid inside a function. A function always returns something if we don't return something manually then it returns undefined by default.

Ref: http://www.ecma-international.org/ecma-262/5.1/#sec-12.9


//******************************* Break Statement ***************************************
The break is for loops or switch statements which you don't have here, you need to use return to break the execution flow of the current function and return to the caller.

//****************************** Call ****************************************************

The call() method calls a function with a given `this` value and arguments provided individually.

Note: While the syntax of this function is almost identical to that of apply(), the fundamental difference is that call() accepts an argument list, while apply() accepts a single array of arguments.

Ref: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/call

Syntax
func.call([thisArg[, arg1, arg2, ...argN]])

thisArg (Optional)
The value to use as `this` when calling func.

Caution: In certain cases, thisArg may not be the actual value seen by the method.
If the method is a function in non-strict mode, null and undefined will be replaced with the global object, and primitive values will be converted to objects.

// Example 01

var person = {
  fullName: function() {
    return this.firstName + " " + this.lastName;
  }
}
var person1 = {
  firstName:"John",
  lastName: "Doe"
}
var person2 = {
  firstName:"Mary",
  lastName: "Doe"
}
person.fullName.call(person1);  // Will return "John Doe"
person.fullName.call(person2);  // Will return "Mary Doe"


// Example 02

function Product(name, price) {
  this.name = name;
  this.price = price;
}

function Food(name, price) {
  Product.call(this, name, price);
  this.category = 'food';
}

console.log(new Food('cheese', 5).name);
// expected output: "cheese"


// Example 03

var person = {
  fullName: function(city, country) {
    return this.firstName + " " + this.lastName + "," + city + "," + country;
  }
}
var person1 = {
  firstName:"John",
  lastName: "Doe"
}
person.fullName.call(person1, "Oslo", "Norway");
// expected output: John Doe, Oslo, Norway














































