// For example:

var promise1 = new Promise(function(resolve, reject) {
  resolve('Success!');
});

promise1.then(function(value) {
  console.log(value);
  // expected output: "Success!"
});


// Example 01:

var promise1 = new Promise(function(resolve, reject) {
  setTimeout(function() {
	resolve('foo');
  }, 300);
});

promise1.then(function(value) {
  console.log(value);
  // expected output: "foo"
});


// For example 02:

// Callback
let first = (val, callback)=> {
	return callback(val+2, false);
};
let second = (val, callback)=> {
	return callback(val+2, false);
};
let third = (val, callback)=> {
	return callback(val+2, false);
};

first(2, function(firstResult, err){
	if(!err) {
		console.log(firstResult);
		second(firstResult, function(secondResult, err){
			console.log(secondResult);
			third(secondResult, function(thirdResult, err){
				console.log(thirdResult);
			});
		});
	}		
});


// Promise
let first = (val)=> { // val = response/resolved value
	return val+2;
};
let second = (val)=> {
	return val+2;
};
let third = (val)=> {
	return val+2;
};

let promise = new Promise(function(resolve, reject){
	resolve(2);
});

promise.then(first).then(second).then(third).then(function(response){
	console.log(response);
});


//********************* async and await*****************
/*
async function doWork(){
	try{
		const response = await makeRequest('google'); // here response is resolved value
		console.log('Response Received');
		const processResponse = await processRequest(response);
		console.log(processResponse);
	}catch(err){
		console.log(err);
	}
}
doWork();
*/

//Example 03
function scaryClown() {
	return new Promise((resolve, reject) => {
		setTimeout(() => {
			resolve(':)');
			//reject('(:');
		}, 2000);
	});
}

async function msg() {
	try {
		const msg = await scaryClown(); // await is waiting for resolve/reject
		console.log(msg); // resolved/response value
		return msg;
	} catch(err) {
		console.log(err); // rejected value
	}
}

let pro = msg();
//msg(); //? Message: :)
pro.then(msg=>console.log(`Hi ${msg}`));
msg().then(msg=>console.log(`Hi ${msg}`));


// Example 04:
function who() {
	return new Promise(resolve => {
		setTimeout(() => {
			resolve('Bablu');
		}, 200);
	});
}

function what() {
	return new Promise(resolve => {
		setTimeout(() => {
			resolve('lurks');
		}, 300);
	});
}

function where() {
	return new Promise(resolve => {
		setTimeout(() => {
			resolve('in the shadows');
		}, 500);
	});
}

async function msg2() {
	const a = await who();
	const b = await what();
	const c = await where();

	console.log(`${ a } ${ b } ${ c }`);
}

msg2();


async function msg3() {
	const [a, b, c] = await Promise.all([who(), what(), where()]);
	console.log(`${ a } ${ b } ${ c }`);
}

msg3();


// Example 05:
async function hello() {
	return 'Hello Bablu!';
}

const b = hello();
console.log(b); // [object Promise] { ... }

b.then(x => console.log(x)); // Hello Bablu!
//or
hello().then(x => console.log(x));


// Example 06: Arrow functions
const msg4 = async function() {
	const msg = await scaryClown();
	console.log('Message:', msg);
}

const msg5 = async () => {
	const msg = await scaryClown();
	console.log('Message:', msg);
}


// Example 07: Error Handling
function yayOrNay() {
	return new Promise((resolve, reject) => {
		const val = Math.round(Math.random() * 1); // 0 or 1, at random
		val ? resolve('Lucky!!') : reject('Nope ðŸ˜ ');
	});
}

async function msg6() {
	try {
		const msg = await yayOrNay();
		console.log(msg);
	} catch(err) {
		console.log(err);
	}
}

msg6(); // Lucky!! or Nope

// We know that async functions always return a promise. So we can use catch statement
async function msg7() {
	const msg = await yayOrNay();
	//console.log(msg);
}

msg7().catch(x => console.log(x)); // Nope


// Example 08
function caserUpper(val) {
	return new Promise((resolve, reject) => {
		resolve(val.toUpperCase());
	});
}

async function msg8(x) {
	try {
		const msg = await caserUpper(x);
		console.log(msg);
	} catch(err) {
		console.log('Ohh no:', err.message);
	}
}

msg8('Hello'); // HELLO
msg8(34); // Ohh no: val.toUpperCase is not a function


