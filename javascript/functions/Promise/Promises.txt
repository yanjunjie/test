//**********************Intro***********************

The Promise object represents the eventual completion (or failure) of an asynchronous operation, and its resulting value.

A Promise is a proxy for a value not necessarily known when the promise is created. It allows you to associate handlers with an asynchronous action's eventual success value or failure reason.

A Promise is in one of these states:

1. pending: initial state, neither fulfilled nor rejected.
2. fulfilled: meaning that the operation completed successfully.
3. rejected: meaning that the operation failed.

A pending promise can either be fulfilled with a value, or rejected with a reason (error). When either of these options happens, the associated handlers queued up by a promise's then method are called. (If the promise has already been fulfilled or rejected when a corresponding handler is attached, the handler will be called, so there is no race condition between an asynchronous operation completing and its handlers being attached.)

As the Promise.prototype.then() and Promise.prototype.catch() methods return promises, they can be chained.


********************************Methods****************************
new Promise()

The constructor is primarily used to wrap functions that do not already support promises.


Promise.reject(reason)

Returns a new Promise object that is rejected with the given reason.


Promise.resolve(value)

Returns a new Promise object that is resolved with the given value. If the value is a thenable (i.e. has a then method), the returned promise will "follow" that thenable, adopting its eventual state; otherwise the returned promise will be fulfilled with the value.

N.B: if we don't use catch statement then it will throw `uncaught` error for rejection.

Example

const promise1 = Promise.resolve(3);
promise1.then(result => console.log(result));


Promise.all(iterable)

To execute parallelly all the promises/tasks at the same time. The Promise. all() method returns a single Promise that fulfills when all of the promises passed as an iterable. It rejects with the reason of the first promise that rejects.

It is typically used after having started multiple asynchronous tasks to run concurrently and having created promises for their results so that one can't wait for another to complete and all the tasks are being finished together. Finally it returns a promise.
Ref: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/all

Example 01

const promise1 = Promise.resolve(3);
const actualValue2 = 42;
const promise3 = new Promise(function(resolve, reject) {
  setTimeout(resolve, 100, 'foo');
});

Promise.all([promise1, actualValue2, promise3]).then(function(values) {
  console.log(values); // expected output: Array [3, 42, "foo"]
});


Example 1.1.0: If the iterable contains non-promise values, they will be ignored. But the evaluation will be done asynchronously. So it gets fulfilled

const actualValue1 = 3
const nonPromiseValue2 = 42;
const nonPromiseValue3 = "foo"

Promise.all([actualValue1, nonPromiseValue2, nonPromiseValue3]).then(function(values) {
  console.log(values);
});

// expected output: Array [3, 42, "foo"]


Example 02

let p = Promise.all([1,2,3]);
let p2 = Promise.all([1,2,3, Promise.resolve(444)]);
let p3 = Promise.all([1,2,3, Promise.reject(555)]);

// using setTimeout we can execute code after the stack is empty
setTimeout(function() {
    console.log(p);
    console.log(p2);
    console.log(p3);
});

// logs (Firefox)
// Promise { <state>: "fulfilled", <value>: Array[3] }
// Promise { <state>: "fulfilled", <value>: Array[4] }
// Promise { <state>: "rejected", <reason>: 555 }


Example 03

var p1 = new Promise((resolve, reject) => { 
  setTimeout(() => resolve('p1_delayed_resolution'), 1000); 
}); 

var p2 = new Promise((resolve, reject) => {
  reject(new Error('p2_immediate_rejection'));
});

Promise.all([
  p1.catch(error => { return error }),
  p2.catch(error => { return error }),
]).then(values => { 
  console.log(values[0]) // "p1_delayed_resolution"
  console.error(values[1]) // "Error: p2_immediate_rejection"
})


Example 04

var p1 = new Promise((resolve, reject) => { 
  setTimeout(() => resolve('p1_delayed_resolution'), 1000); 
}); 

var p2 = new Promise((resolve, reject) => {
  reject(new Error('p2_immediate_rejection'));
});

Promise.all([
  p1.catch(error => { return error }),
  p2.catch(error => { return error }),
]).then(values => { 
  console.log(values[0]) // "p1_delayed_resolution"
  console.error(values[1]) // "Error: p2_immediate_rejection"
})


Promise.race(iterable)

Wait until one of the promises is resolved or rejected.
If the returned promise resolves, it is resolved with the value of the first promise in the iterable that resolved.
If it rejects, it is rejected with the reason from the first promise that was rejected.


Example 01

const promise1 = new Promise(function(resolve, reject) {
    setTimeout(resolve, 200, 'one');
});

const str = 'two'
const promise2 = new Promise(function(resolve, reject) {
    setTimeout(() => resolve(str), 100, str);
});

const promise3 = new Promise(function(resolve, reject) {
    setTimeout(() => resolve('three'), 50);
});

const delayed = (ms) => new Promise((resolve, reject) => setTimeout(resolve, ms, "please wait...")); 

Promise.race([promise1, promise2, promise3, delayed(54)]).then(function(value) {
  console.log(value);
  // all resolve, but promise3 is faster
});

// expected output: "three"


Example 02

// 300 ms _feels_ "instant", and flickers are bad

function getUserInfo(user) {
  return new Promise((resolve, reject) => {
    // had it at 1500 to be more true-to-life, but 900 is better for testing
    setTimeout(() => resolve("user data!"), Math.floor(900*Math.random()));
  });
}

function showUserInfo(user) {
  return getUserInfo().then(info => {
    console.log("user info:", info);
    return true;
  });
}

function showSpinner() {
  console.log("please wait...")
}

function timeout(delay, result) {
  return new Promise(resolve => {
    setTimeout(() => resolve(result), delay);
  });
}
Promise.race([showUserInfo(), timeout(300)]).then(displayed => {
  if (!displayed) showSpinner();
});

You can see race function executes all promises, but whomever finishes first will resolve/reject with wrapper Promise.


Example 03

function timeout(delay) {
  let cancel;
  const wait = new Promise(resolve => {
    const timer = setTimeout(() => resolve(false), delay);
    cancel = () => {
      clearTimeout(timer);
      resolve(true);
    };
  });
  wait.cancel = cancel;
  return wait;
}


function doWork() {
  const workFactor = Math.floor(600*Math.random());
  const work = timeout(workFactor);
  
  const result = work.then(canceled => {
    if (canceled)
      console.log('Work canceled');
    else
      console.log('Work done in', workFactor, 'ms');
    return !canceled;
  });
  result.cancel = work.cancel;
  return result;
}

function attemptWork() {
  const work = doWork();
  return Promise.race([work, timeout(300)])
    .then(done => {
      if (!done)
        work.cancel();
      return (done ? 'Work complete!' : 'I gave up');
  });
}

attemptWork().then(console.log);


Example 04

async function batchRequests(options) {
    let query = { offset: 0, limit: options.limit };

    do {
        batch = await model.findAll(query);
        query.offset += options.limit;

        if (batch.length) {
            const promise = doLongRequestForBatch(batch).then(() => {
                // Once complete, pop this promise from our array
                // so that we know we can add another batch in its place
                _.remove(promises, p => p === promise);
            });
            promises.push(promise);

            // Once we hit our concurrency limit, wait for at least one promise to
            // resolve before continuing to batch off requests
            if (promises.length >= options.concurrentBatches) {
                await Promise.race(promises);
            }
        }
    } while (batch.length);

    // Wait for remaining batches to finish
    return Promise.all(promises);
}

batchRequests({ limit: 100, concurrentBatches: 5 });


Example 05

Imagine you need to fetch some data from a server and if the data takes too long to load (say 15 seconds) you want to show an error.

You would call promise.race() with two promises, the first being your ajax request and the second being a simple setTimeout(() => resolve("ERROR"), 15000)


Promise.allSettled(iterable)

The Promise.allSettled() method returns a promise after all of the given promises have either resolved or rejected, with an array of objects that each describes the outcome of each promise.

Promise.all() returns a rejected promise as soon as it gets the first rejection in the list of promises given to it. It does not necessarily return all results and it returns rejected if any promise you passed it is rejected. It essentially gives up as soon as one promise is rejected. That's the point of Promise.settle(). It will gives you all the results, even if some are rejected and you can then cull through all the results.


Example 01

const promise1 = Promise.resolve(3);
const promise2 = new Promise((resolve, reject) => setTimeout(reject, 100, 'foo'));
const promises = [promise1, promise2];

console.log(Promise.allSettled(promises));
//Promise.allSettled(promises).then((results) => results.forEach((result) => console.log(result.status)));
Promise.allSettled(promises).then(results => {
  for (const result of results) {
    console.log(result.status);
  }
});

// expected output:
// "fulfilled"
// "rejected"


p.then(onFulfilled[, onRejected]);

The fulfillment of the promise is simply logged, via a fulfill callback and the rejection if it doesn't fulfill via a rejection callback using p1.then(). And p.then() method also can return a Promise like Promise constructor.

N.B: Promise constructor is resolved by calling resove() method and promise value is that resolved method's parameter. On the other hand p1.then() is resoved by returning something using fulfill callback so that other promise like p2.then() gets its resoved/returned value to be resoved.
i.e.

p.then((value) => {
  // fulfillment
}, (reason) => {
  // rejection
});


Example 01

let myFirstPromise = new Promise((resolve, reject) => {
  // We call resolve(...) when what we were doing asynchronously was successful, and reject(...) when it failed.
  // In this example, we use setTimeout(...) to simulate async code.
  // In reality, you will probably be using something like XHR or an HTML5 API.
  setTimeout( function() {
    resolve("Success!")  // Yay! Everything went well!
  }, 250) 
}) 

myFirstPromise
.then((successMessage) => {
  // successMessage is whatever we passed in the resolve(...) function above.
  // It doesn't have to be a string, but if it is only a succeed message, it probably will be.
  console.log("Yay! " + successMessage) 
});

// Expected result: Yay! Success!

let myFirstPromise = new Promise((resolve, reject) => {
  // We call resolve(...) when what we were doing asynchronously was successful, and reject(...) when it failed.
  // In this example, we use setTimeout(...) to simulate async code.
  // In reality, you will probably be using something like XHR or an HTML5 API.
  setTimeout( function() {
    reject("Failure!")  // Yay! Everything went well!
  }, 250) 
});

myFirstPromise
.then((successMessage) => {
  // successMessage is whatever we passed in the resolve(...) function above.
  // It doesn't have to be a string, but if it is only a succeed message, it probably will be.
  console.log("Yay! " + successMessage) 
})
.catch((failureMessage) => {
  console.log("Nope! " + failureMessage);
});

// Expected result: Nope! Failure!


// Example 02

let first = (val)=> {
  return val+2;
};
let second = (val)=> {
  return val+2;
};
let third = (val)=> {
  return val+2;
};

let promise = new Promise(function(resolve, reject) {
  resolve(2);
});

/*// ES2017
let promise = async function() {
  return 2;
};*/

let fulfilledPromise = promise.then(first).then(second).then(third).then(function(response) {
  console.log(response); // 8
});

console.log(promise); // Promise {<resolved>: 2}
console.log(promise.then(first).then(second).then(third)); // Promise {<resolved>: 8}, now we have to retrieve the resolved value from the promise object by using another then method or await keyword
console.log(fulfilledPromise); // Promise {<resolved>: undefined}, this is undefined because it doesn't return/resolve anything
console.log(await promise); // 2


// Example 03

function makeRequest(media){
  return new Promise((resolve, reject) => {
    console.log(`Making Request to ${media}`);
    if(media==='google'){
      resolve('Google says hi');
    } else {
      reject('We can only talk to Google');
    }
  });
}

function processRequest(response){
  return new Promise((resolve, reject) => {
    console.log('Processing response');
    resolve(`Extra Information + ${response}`);
  });
}

makeRequest('google').then(response => {
  console.log('Response Received');
  return processRequest(response);
}).then(processResponse=>{
  console.log(processResponse);
}).catch(err=>{
  console.log(err);
});

console.dir(makeRequest('google'));


// Example 04

Running Promises in Sequence
/**
 * Runs promises from array of functions that can return promises
 * in chained manner
 *
 * @param {array} arr - promise arr
 * @return {Object} promise object
 */
function runPromiseInSequence(arr, input) {
  return arr.reduce(
    (promiseChain, currentFunction) => promiseChain.then(currentFunction),
    Promise.resolve(input)
  )
}

// promise function 1
function p1(a) {
  return new Promise((resolve, reject) => {
    resolve(a * 5)
  })
}

// promise function 2
function p2(a) {
  return new Promise((resolve, reject) => {
    resolve(a * 2)
  })
}

// function 3  - will be wrapped in a resolved promise by .then()
function f3(a) {
 return a * 3
}

// promise function 4
function p4(a) {
  return new Promise((resolve, reject) => {
    resolve(a * 4)
  })
}

const promiseArr = [p1, p2, f3, p4]
runPromiseInSequence(promiseArr, 10)
  .then(console.log)   // 1200

  




























