// in gherkin
%{testData.marketplaceBuyers.marketplaceBuyer1.company}

if (values.company) {
    let expected = values.company;
    if (values.company.match(/%{([^}]+)}/)) {
      const path = values.company.match(/%{([^}]+)}/);
      let templateData = _.get(this, path[1]);
      if (typeof templateData === `string`) {
        templateData = JSON.parse(templateData);
      }
      expected = templateData.name;
    }

    const elementText = await getElementText(this, this.pages
      .workOrderDetails.company.replace(`{txt}`, expected));
    expect(elementText).to.equal(expected);
  }

If you guys face any query related error then please hit the url :
https://ui-test2.fndev.net/tools/dbmigrate/

// debuging assets
await this.retry(async () => {

}, 10000, 200);

const Promise = require(`bluebird`);
await Promise.delay(1000); // need to wait extra to use the next textbox on same page
or 
const [el] = await world.waitFor(locator, { timeoutMs: 3000 });
await this.waitFor(buyerSectionInputErrorSelector, { timeoutMs: 3 * 1000 });
await world.waitFor(`//*[@class='Select-loading-zone']`, { criteria: `elementNotLocated` });
here, elementNotLocated is a selenium function name

// test text
const actualText = await getElementText(
  this,
  `//h1[contains(@class,'Heading--h2')]`,
);
console.log(actualText, 'tittt');


// drop down searchable
  if (values.location) {
    await setTextBoxDropDown(this, pageResource.woLocation, values.location, Key.ENTER);
  }

// react drop down select
  if (values.typeOfWork) {
    this.retry(async () => {
      let [el] = await this.waitFor(pageResource.typeOfWork, { timeoutMs: 3000 });
      el.click();
      [el] = await this.waitFor(this.pages.global.text(values.typeOfWork), { timeoutMs: 3000 });
      el.click();
    });
  }

  await setReactDropDown(
    this,
    `//select[@name="templateId"]`,
    this.template.workorder_template.template_name,
  );

  await setReactDropDown(this,
  `//span[text()='Field Type']/parent::label//following-sibling::div//div[@class='Select-control']`,
  values.fieldType);

When(/^I click the work order from list$/, async function (table) {
  const values = table.rowsHash();
  if (values.title) {
    const tempTitle = await parsePayload(values.title, this.template.workorder_template);
    clickElement(this, `//div[contains(text(), '${tempTitle}')]/parent::a`);
  }
});

When(/^I click the newly created work order$/, async function () {
  const pageResource = this.pages.spreadsheetImport;
  const templateData = this.template.workorder_template.template_data;
  const woTitle = templateData.title;
  templateData.woId
  = await getElementText(this, pageResource.woIdSelector.replace(`{txt}`, woTitle));
  const url = `${this.appUrl}/workorders/${templateData.woId}`;
  this.attach(`url: ${url}`);
  await this.retry(async () => {
    await this.driver.get(url);
    await this.waitFor(this.pages.workOrderDetails.page, { timeoutMs: 20000 });
  }, 15000, 500);
  await waitForLoader(this);
});

// total elements length count
let totalLocations = await getElementText(this, pageResource.totalLocations);
[totalLocations] = totalLocations.match(/\d+/);
const el = await this.waitFor(pageResource.totalChildLocations);
expect(parseInt(totalLocations, 10)).to.equal(el.length);

// template
this.template = await getTemplate(this, values.template);
this.template.workorder_template.template_data = JSON.parse(
  this.template.workorder_template.template_data,
);

const { template1 } = this.testData.templates;
template1.workorder_template.template_name

// Dates
    if (startDate && endDate) {
      startDate = await parseDate(startDate);
      endDate = await parseDate(endDate);
      startDate = await formatRelativeDate(startDate, `MM/DD/YY`);
      endDate = await formatRelativeDate(endDate, `MM/DD/YY`);
    }

// Drag & Drop Elements

    async dragDrop(draggableLocator, droppableLocator) {
        let draggable = await this.driver.findElement(draggableLocator);
        let droppable = await this.driver.findElement(droppableLocator);
        await this.driver
            .actions()
            .dragAndDrop(draggable, droppable)
            .perform();
    }


  dragDropElement: async (draggableLocator, droppableLocator) => {
    const draggable = await this.driver.findElement(draggableLocator);
    const droppable = await this.driver.findElement(droppableLocator);
    await this.driver
      .actions()
      .dragAndDrop(draggable, droppable)
      .perform();
  },


  dragDropElement: async (world, draggableLocator, droppableLocator,
    waitForMs = 3000, retryMs = 50) => {
    await world.retry(async () => {
      const [draggable] = await world.waitFor(draggableLocator);
      const [droppable] = await world.waitFor(droppableLocator);
      await driver.actions()
        .dragAndDrop(draggable, droppable)
        .perform();
    }, waitForMs, retryMs);
  },

uses: await dragDropElement(this, buyerSectionOneLocator.replace(`{txt}`, values.buyerSection1), buyerSectionOneLocator2.replace(`{txt}`, values.buyerSection2));

// form data

    formData: {
        file: {
            value: fs.createReadStream('test/test.jpg'),
            options: {
                filename: 'test.jpg',
                contentType: 'image/jpg'
            }
        }
    },
    headers: {
      'content-type': 'multipart/form-data'
    }

//
    Then verify work order provider custom fields are not displayed
      | label                |
      | Client Custom Field  |
      | Project Custom Field |


// template data
{ 
   "_v":2,
   "status_id":1,
   "status":"STATUS_DRAFT",
   "status_sub":"SUBSTATUS_DRAFT_TEMPLATE",
   "status_intent":"normal",
   "title":"POS unit printing multiple copies of send receipts",
   "type_of_work":63,
   "internal_post":false,
   "description_public":"Replace broken keypad unit on alarm near south wall MUST BE PERFORMED TUESDAY Site survey for RJ-45 install project across entire store follow layout as per instructions Alarm system false reporting due to possible keypad water damage Door closer unit no longer functioning, makes loud noises and refuses to open the cartridge Verify theft of main device due to chain ATM service repair keypad replacement damaged due to water leakage from overhead A/C system Flood caused water damage to CCTV unit in rear office",
   "description_private":"POS unit printing multiple copies of send receipts Door closer unit no longer functioning, makes loud noises and refuses to open the cartridge Cabling install / replace older cat5 with new fiber lines across north side of front office Replace broken CCTV display at site NO LATER THAN 5pm Broken CCTV display - replace as per on site contaxt ATM KeyPad Replacement Verify theft of main device due to chain",
   "relative_schedule_date":"+1 day",
   "relative_schedule_time":"08:00 AM",
   "relative_schedule_range":"",
   "connectWise":0,
   "autotask":0,
   "externalTicketNumber":0,
   "companyIntegrationNumber":0,
   "arriveAt":null,
   "finance_account":0,
   "pay_type":2,
   "pay_base_amount":49,
   "pay_estimated_hours":19,
   "contacts":[ 
      { 
         "name":"support",
         "email":"abc@gmail.com",
         "phone":"+1 877-573-4353",
         "phone_extension":"100",
         "role":"Technical help",
         "notes":"demo notes"
      }
   ],
   "customFields":[ 

   ],
   "site_manager":547,
   "penalties":[ 
      { 
         "is_visible":true,
         "penalty_id":2,
         "name":"Late fee",
         "amount":"5% of labor",
         "description":"If job is completed an hour or more past the scheduled ETA provided by the worker."
      },
      { 
         "is_visible":true,
         "penalty_id":1,
         "name":"Missing tools",
         "amount":"$25.00",
         "description":"If provider needs to perform a retrip due to missing tools called out in the SoW."
      }
   ],
   "tasks":[ 
      { 
         "category":"prep",
         "alertOnCompletion":[ 

         ],
         "instruction":"Set ETA",
         "instruction_key":"confirmassignment",
         "instruction_id":1
      },
      { 
         "category":"onsite",
         "alertOnCompletion":[ 

         ],
         "instruction":"Check in",
         "instruction_key":"checkin",
         "instruction_id":3
      },
      { 
         "category":"onsite",
         "alertOnCompletion":[ 

         ],
         "instruction":"Check out",
         "instruction_key":"checkout",
         "instruction_id":4
      },
      { 
         "category":"post",
         "alertOnCompletion":[ 

         ],
         "instruction":"Enter close out notes",
         "instruction_key":"closeoutnotes",
         "instruction_id":2
      }
   ],
   "networks":[ 
      { 
         "id":"1",
         "text":"Field Nation",
         "process_payments":"1"
      }
   ],
   "team":null,
   "service_types":[ 
      { 
         "id":"68",
         "text":"Repair",
         "service_type_id":"3"
      }
   ]
}









