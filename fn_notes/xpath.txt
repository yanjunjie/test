// For Debugging
https://stackoverflow.com/questions/29386116/inspecting-drop-down-menus-in-new-chrome
https://stackoverflow.com/questions/49299042/react-select-how-to-keep-dropdown-open-when-styling-in-inspector

"explainCancellationReason": "//div[contains(@class, 'ReactModalPortal')]//*/label[contains(text(), 'explanation')]/following-sibling::textarea"
"messageAssignedProvider": "//div[contains(@class, 'ReactModalPortal')]//*/label[contains(text(), 'Message')]/following-sibling::textarea"
"markIncompleteDropDown": "//div[@class='ReactModalPortal']//*/select"
"markIncompleteTextArea": "//div[@class='ReactModalPortal']//*/textarea"
"decliningReasonSelect": "//label[@for=\"decline_reason\"]/following-sibling::div"
"pgBadgeIcon": "//div[@data-nw-file='Badge' and contains(@title, 'In a talent pool')]"
"pendingAssignmentTab": "//div[contains(@data-nw-file,'UserList')]//li[contains(text(), 'Pending assignment')]"
"descriptionEdit": "//div[@data-nw-id='WorkOrderDescription']//*/button[@data-nw-id='Edit']"
//div[@id='tab2']//table[@class='payTablecss']//td[text()='$30.00']

// Menu Text Related
await this.waitFor(`//a[contains(@class, 'selected') and contains(text(), '${tabName}')]`);
await this.waitFor(`//a[contains(@class, 'selected') and text()='${tabName}']`);

### Ancestor Element find using contents
//a[contains(@href,'5693')]//ancestor::div[@data-nw-file="Card"]/preceding-sibling::div//button
(//bookmark/ancestor::*[@id][1]/@id | //bookmark/preceding::*[@id][1]/@id)[last()]
//*[title="50"]/ancestor::store
//*[ancestor::foo[bar[@attr="val"]]]
here, foo is ancestor
      bar is child
Or
//span[text()='Provider Custom Fields']//ancestor::div[@data-nw-file="TileDivision"]//following-sibling::div//button

// ancestor selecting by index or using ..
ancestor::node()[3]
or 
ancestor::*[3]
or
../../..

//*[title="50"]/parent::*
//*[title="50"]/..

### Descendant Element find using parent
//div[contains(text(), 'Cancellation')]/parent::div/parent::div/following-sibling::div

### Sibling find based on contents
//div[contains(text(), 'Cancellation')]/following-sibling::div

Here, the preceding and following index:
------------------+------+------------------
preceding-sibling | self | following-sibling
------------------|------|------------------
last() ...  2   1 |  X   | 1   2  ... last()
------------------+------+------------------

i.e: 
//input[@value='Untitled2']/ancestor::*[2]/preceding-sibling::*[1]
//input[@value='Untitled2']/ancestor::node()[2]/preceding-sibling::node()[1]
//a[.="Next."]/preceding::a[1]
preceding-sibling::*[1][self::p] to select the preceding sibling element if it is a  p element.
or...
preceding-sibling::p[not(preceding-sibling::a)][1] select p siblings that don't have a preceding a sibling 

### element find based on contents
const locator = `//input[@data-nw-file='${name}']`;
await clickElement(this, locator);

### Return Text of the selected element
/node/child::text()[1] - should return Text1st
/node/child::text()[2] - should return text2nd
/node/text()[1] - should return Text1st
/node/text()[2] - should return text2nd
/root/div[.//a[@class='1']]/text()

***getText() for selenium
i.e,
var textPromise = driver.findElement(webdriver.By.className("credits")).getText();
textPromise.then((text) => {
  console.log(text);
});

driver.findElement(webdriver.By.css('.failures em')).getText().then(function(v) {
    expect(v).to.equal('0');
    done();
});

i.e,
  if (values.customFieldName) {
    const nameTip = await getElementText(this, this.pages.createWorkOrder.customFieldNameTip);
    expect(nameTip).to.contains(values.customFieldName);
  }

// get selected value/text
"sceduleDayGet": "//div[@data-nw-id='schedule']//label[@for='ScheduleType']//parent::label//following-sibling::div//div[@class='Select-value']",
const actual = await getElementText(this, scheduleField.sceduleDayGet);

// get input value/text
"sceduleTime":"//div[@data-nw-id='schedule']//input[@id='StartTimePicker']",
const actual = await getElementAttribute(this, scheduleField.sceduleTime, `value`);



//###Count elements
count(//input[@name='hai'])
evaluates to 3
then
(//input[@id='stack'])[count(//input[@name='hai'])]
will select the same nodes as
(//input[@id='stack'])[3]


//###Select one of two or more elements
//input[@data-nw-file='PayPal'] | //label[contains(text(), 'PayPal')]//input[@type='radio']
(//*[@id="xxx"] | //body)[last()]
Here, The ( ... | ... ) part returns a union of its subparts. These are *[@id="xxx"] -- any element

//### starts-with
//Heading[starts-with(., 'Ethical') and ends-with(., 'consent')]

<a href="mylink_somerandomstuff">link text</a>
//a[starts-with(@href, "mylink")]
//a[contains(@href, 'mylink')]








