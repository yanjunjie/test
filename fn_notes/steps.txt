//ENVIRONMENT=test2 PLATFORM=chrome npm run test-only @4429bab2

//******************Data Table******************
When(/^I set reason for cancellation work order$/, async function (table) {
  const values = table.rowsHash();
  if (values.reasonForCancellation) {
    await setTextBox(
      this,
      this.pages.workOrderDetails.cancellationReasonType, values.reasonForCancellation, Key.ENTER,
    );
  }
  if (values.messageToAssignedProvider) {
    await setTextBox(
      this,
      this.pages.workOrderDetails.messageAssignedProvider, values.messageToAssignedProvider,
    );
  }
  if (values.explanationForCancellation) {
    await setTextBox(
      this,
      this.pages.workOrderDetails.explainCancellationReason, values.explanationForCancellation,
    );
  }
});

//******************End Data Table******************


//******************Events (elements.js)**********************
// select events
When(/^I set the simple work order address$/, async function (table) {
  const values = table.rowsHash();
  if (values.State) {
    await setTextBoxDropDown(this, simpleWorkPage.state, values.State);
  }
}
await setDropDown(this, this.pages.createWorkOrder.scheduleType, values.type);
setReactDropDown

// tab click event
When(/^I click the '(.+)' tab for cancellation fees$/, async function (tabName) {
  await this.retry(async () => {
    // click the tab
    const [tab] = await this.waitFor(this.pages.cancellationFees.tab.replace(`{txt}`, tabName));
    await tab.click();
    // check for active
    await this.waitFor(`//a[contains(@class, 'selected') and contains(text(), '${tabName}')]`);
  }, 45000, 200);
});

// click and text entry events
When(/^I search for '(.+)' on '(.+)' tab$/, async function (woName, tab) {
  const searchLocator = `${pageResource.searchRevertible}//following-sibling::input[@value='Search']`;
  await clickElement(this, searchLocator);

  // text entry event
  const workOrderId = await getWorkOrderId(this, woName);
  await setTextBox(this, pageResource.searchRevertible, workOrderId);
});
await setTextBox(this, pageResource.searchField, searchBy, Key.ENTER);


N.B, We should use like this
const [element] = await this.waitFor(this.pages.cancellationFees.link.replace(`{txt}`, text));
await element.click();
await this.waitFor(this.pages.templateDetails.overviewEdit).then(([el]) => el.click());


await world.waitFor(`//*[@class='Select-loading-zone']`, { criteria: `elementNotLocated` });
The criteria: `elementNotLocated` will wait until element is disappeared
Or, for element not to be located in the given locator
await world.waitFor(`//*[@class='Select-loading-zone']`, { criteria: `elementIsClickable` });
criteria: until element is clickable

*** clickStoppedElement event is used when an element is animated or moving or can also be static

await Promise.delay(1000); // need to wait extra to use the next textbox on same page

this.retry => This is needed when an action fails again and again 

clickElement => only click element if it is clickable
clickStopElement => click any element which is moving or having animation. So purpose is it will wait to stop and click it
//******************End Events**********************


//******************Loader**********************
  await waitForLoader(this, `//*[text()='Loading...']`);
  await waitForLoader(this, `//div[@data-nw-id='Loader-container']`, { maxWaitTime: 50 }); // wait for loader to finish
  waitForPageLoad
  waitStoppedElement

//******************End Loader**********************


//******************Restfully**********************
/**
 * Cancels the given workorder
 * @example
 *
 * Given restfully cancel workorder 'assignedWorkOrder1'
 * | reason  | Customer cancelled                       |
 * | message | Sorry, customer cancelled the work order |
 */
Then(/^restfully cancel workorder '(.+)'$/, async function (woName, table) {
  const values = table.rowsHash();
  const { username } = this.currentUser;
  // get the id
  const workOrderId = await getWorkOrderId(this, woName);

  if (!username) {
    throw new Error(`Username ${this.currentUser.user} is not valid`);
  } else {
    this.lastResponse = await restfulRequest(
      this,
      {
        type: `workOrderCancel`,
        params:
              {
                woId: workOrderId,
                reason: values.reason,
                message: values.message,
              },
      }, { username },
    );
    expect(this.lastResponse.statusCode).to.equal(200);
  }
});

// check `Set ETA` value under the results object
And I use auth token for 'marketplaceBuyer1'
And I GET to 'v2/workorders/%{currentWorkOrder.id}/tasks'
Then the response body path '%{results[0].descriptions.task}' should contain 'Set ETA'




// by tim

/**
 * Cancels the given workorder
 * @example
 *
 * Given restfully cancel workorder 'assignedWorkOrder1'
 * | reason  | Customer cancelled                       |
 * | message | Sorry, customer cancelled the work order |
 */
Then(/^restfully cancel workorder '(.+)'$/, async function (woName, table) {
  const values = table.rowsHash();
  const { username } = this.currentUser;
  // get the id
  const workOrderId = await getWorkOrderId(this, woName); // get work order id

  if (!username) {
    throw new Error(`Username ${this.currentUser.user} is not valid`);
  } else {
    await getAccessToken(this, this.currentUser.username);
    const url = `${this.appUrl}/v2/workorders/${workOrderId}?access_token=${this.auth.access_token}`;
    const options = {
      url,
      body: {
        notes: values.reason,
        cancel_reason: 59,
        message_to_provider: values.message,
        cancel_request_not_charge: false,
        apply_passive_cancellation_fee: true,
      },
      json: true,
    };
    this.lastResponse = await rp.deleteQ(options);
    expect(this.lastResponse.statusCode).to.equal(200);
  }
});

// access token
this.auth.access_token

//******************End Restfully**********************


//******************User Info**********************
  const expectedProviderId = await getUserId(this, providerName);
  searchBy = await getWorkOrderId(this, alias);
  searchBy = await getWorkOrderTitle(this, alias);
//******************End User Info**********************


//******************Comparison**********************
// check the text exists or not + wait for element
  await this.waitFor(`//table[@class='payTablecss']//td[contains(text(),'${txt}')]`);

  await this.retry(async () => {
    const [myButton] = await this.waitFor(`//button[@data-nw-id='Back to Payment Terms']/parent::span/following-sibling::span/button`);
    const isEnabled = await myButton.getAttribute(`disabled`);
    await expect(isEnabled).to.be.null;
  }, 20000, 200);

    await this.retry(async () => {
      const elemLen = await this.waitFor(locator, { timeoutMs: 4000 })
        .then(el => el.length || 0);
      expect(elemLen).to.above(0);
    }, 8000, 100);

  include=> works like indexOf function in javascript
  equal=> works for equality

  if (values.clickSendJobRequestButton) {
    await this.retry(async () => {
      const [el] = await this.waitFor(pageResource.clickSendJobRequestButton);
      expect(await el.isEnabled()).to.equal(true);
      el.click();
    }, 20000, 200);
  }

 await this.retry(async () => {
    const actualStatus = await this.waitFor(`(//span[contains(@class, 'Status')]/span)[1]`)
      .then(([el]) => el.getText());
    expect(actualStatus).to.equal(expected);
  }, 60000, 500);

const isClickable = await this.waitFor(this.pages.global.button(name), { timeoutMs: 15000 })
      .then(([el]) => el.isEnabled());
expect(isClickable).to.equal(true);

const [el] = await this.waitFor(this.pages.global.button(name), { timeoutMs: 20000 });
const isDisplayed = await displayedElement(el);
expect(isDisplayed).to.equal(true);

const expectedQueryString = tabUrl.split(`?`)[1];
await this.driver.get(tabUrl);
const currentUrl = await this.driver.getCurrentUrl();
expect(currentUrl).to.includes(expectedQueryString);

const expectedTemplateId = url.match(/templateId/)[0];
await this.driver.get(url);
const currentUrl = await this.driver.getCurrentUrl();
expect(currentUrl).to.includes(expectedTemplateId);

const elLenth = await this.waitFor(pageResource.locationMap, { timeoutMs: 4000 })
    .then(el => el.length || 0);
expect(elLenth).to.above(0);

const url = `${this.appUrl}/templates/${templateId}`;
  await this.retry(async () => {
    const expectedTemplateId = url.split(`/`).pop();
    await this.driver.get(url);
    const currentUrl = await this.driver.getCurrentUrl();
    expect(currentUrl).to.includes(expectedTemplateId);
    await this.waitFor(this.pages.createTemplate.templatePage, { timeoutMs: 20000 });
  }, 20000, 500);

//******************End Comparison**********************


//******************Chai**********************
expect(payAmount).to.contain(amount);

if (values.amount) {
    const actual = await getElementText(this, templateDetailsPage.amount);
    expect(actual).to.contains(values.amount);
  }

if (values.hours) {
    const actual = await getElementText(this, templateDetailsPage.hours);
    expect(actual).to.equal(values.hours);
  }

expect(thatSelectedItem).to.match(/(?:jpg|png|gif)/)

expect(pm.response.json().resources.length).to.be.above(0);

An alias of least is gte (great than or equal to). Vice versa, you can use lte (less than or equal to) to check the opposite.
So, to answer the question, you can do:
expect(percent).to.be.gte(0)

await expect(isEnabled).to.be.null;
expect(await el.isEnabled()).to.equal(true);
expect(actualTaskText).to.contains(`${values.phone} regarding ${values.regarding}`);

//******************End Chai**********************


//******************Javascript**********************
// except number remove all from string
amount = '$91.00';
amount.replace(/[^0-9.]/g, ``); // "91.00"

// only digit from string
let totalLocations = await getElementText(this, pageResource.totalLocations);
[totalLocations] = totalLocations.match(/\d+/);

url = `https://ui-test2.fndev.net/workorders/112`;
expectedTemplateId = url.match(/\d+/g);
expectedTemplateId = url.match(/[0-9]+/g);
index = index.replace(/[^0-9.]/g, ``);


// Specific fractions
let stateTaxAmount = ((serviceCharge / values.totalTexasSites) * values.stateTaxPercent) / 100;
stateTaxAmount = parseFloat(stateTaxAmount.toFixed(2));
or Number(my_float.toFixed(2));
var twoPlacedFloat = parseFloat(yourString).toFixed(2)
Here, toFiexed() returns string value

// last segment from url
let part = url.substring(url.lastIndexOf('/') + 1);

let array = url.split('/');
let lastsegment = array[array.length-1];
let lastsegment = array.pop();

// capitalized every first letters
const capitalizedDropDown = dropDown.split(/\s+/).map(s => s.charAt(0).toUpperCase() + s.substring(1).toLowerCase()).join(` `);
const capitalized = this.replace(/(?:^|\s)\S/g, function(a) { return a.toUpperCase(); });
const capitalized = 'your string'.replace(/\b\w/g, l => l.toUpperCase()); // => 'Your String'

// payText = payText[0].toUpperCase() + payText.slice(1);

// Convert preposition to lowaer case
function toCamel(string){
  return string.replace(/(?:_| |\b)(\w)/g, function($1){return $1.toUpperCase().replace('_',' ');});
}

str = 'Number Of Devices';
str = str.replace(/(?:Of)/g, function($1){return $1.replace('Of','of');})
exType = exType.replace(/(?:Of|In)/g, $1 => $1.toLowerCase());
exType = exType.replace(/(?:Of|In|For)\s/g, $1 => $1.toLowerCase()); //more stable, here \s because after every preposition having a space
Ref: https://stackoverflow.com/questions/21792367/replace-underscores-with-spaces-and-capitalize-words

//******************End Javascript**********************


//******************Data Table**********************
// hashes() - returns an object and the first row is object properties and rest rows are values accordingly for example in the following table fieldName and fieldValue are properties
 * When I set custom field value
 * | fieldName   | fieldValue  |
 * | Buyer Field | Field value |

for (const { fieldName, fieldValue } of table.hashes()) {
  console.log(fieldName, fieldValue);
  if (fieldName === `Buyer Field`) {
    await setTextBox(this, pageResource.customFieldInput.replace(`{txt}`, fieldName), fieldValue);
  }
}

for (const expected of table.hashes()) {
      locator = pageResource.customFieldEdit.replace(`{txt}`, expected.label);
      await setTextBox(this, locator, expected.value);
    }

Ref: I fill out the license form

Then(/^the pay increase request section displays$/, async function (table) {
  for (const { type, amount } of table.hashes()) {
    await this.retry(async () => {
      const [el] = await this.waitFor(this.pages.workOrderDetails.pay.increasePayChip);
      const actual = await el.getText();
      expect(actual).to.include(type.toLowerCase());
      expect(actual).to.include(amount);
    }, 20000, 200);
  }
});

// rowsHash() - returns an object and First column is for its properties and Second column is for its values
* When I set custom field value
* | fieldName  | Buyer Field       |
* | fieldValue | Buyer Field value |

Example:
And I set work order overview
| client   | client1   |
| project  | project1  |
| template | template1 |
console.log(table.rowsHash()); //{ client: 'client1', project: 'project1', template: 'template1' }

Uses:
const values = table.rowsHash();
if (values.fieldName && values.fieldValue) {
  await setTextBox(this, pageResource.customFieldInput.replace(`{txt}`, values.fieldName), values.fieldValue);
}

//raw() - returns an array of arrays and rows are array elements of the array and inner arrays are a set of column values.
So in the following example there are 1 array of 4 arrays

Given I start with 0
When I multiply the following numbers:
  | 1 |
  | 2 |
  | 3 |
  | 4 |
Then I got 0

Example: 
console.log(table.raw()); //[[1], [2], [3], [4]];
[[1], [2], [3], [4]].map(row => row[0])
        .map(v => parseInt(v))
        .reduce((total, val, key) => total + val, 0); // 10

Uses:
this.actualAnswer = table.raw()
        .map(row => row[0])
        .map(v => parseInt(v))
        .reduce((total, val, key) => total * val, 0); // 2nd param is 0 as initial value for total

N.B: The map() method creates a new array with the results of calling a function for every array element and does not change the orginal array.

Example:
numbersArr = [4, 9, 16, 25];
newNumbersArr = numbersArr.map(Math.sqrt); //[2, 3, 4, 5]

//rows() - returns array


//******************End Data Table**********************

//******************* Lodash *****************
_.startCase(_.toLower('jhon doe')); //=> Jhon Doe
_.startCase('jhon doe') //=> Jhon Doe

// capitalized only first Word's letter and all will remain small
_.capitalize('Amar Sonar Bangla') => Amar sonar bangla

// capitalized string
string = 'hello world';
string.charAt(0).toUpperCase() + string.slice(1).toLowerCase(); //=>"Hello world"
_.upperFirst('jon doe') //=> Jon doe

// _.camelCase(section[0])]);

//******************* End Lodash *****************


// like session variable in template
 const woId = await getElementText(this, `//div[contains(text(), '${woTitle}')]/parent::a//preceding::a[1]`);
 this.template.workorder_template.template_data.woId = woId;
 or
 | title       | %{template.workorder_template.template_data.title} |

const amount = await parseString(values.amount, this.template.workorder_template);
 | amount | %{template_data.pay_base_amount}        |

this.testData.templates.template1.workorder_template.template_data  // template data details with wo in rare_steps.js
this.testData.templates.template1.workorder_template.template_name  // template name
this.testData.templates.template1.workorder_template.id // id

// payments
this.testData.paymentAccounts.account1

// company
this.testData.marketplaceBuyers.marketplaceBuyer1.company.name // company name/id

// Buyer
this.testData.marketplaceBuyers.marketplaceBuyer1.alias // buyer name

// Pay
this.lastResponse.body.v2.pay
this.lastResponse.body.v2.pay.funding["0"] // Pre-fund object
this.lastResponse.body.v2.pay.funding["1"] // Finance object
this.lastResponse.body.v2.pay.funding["1"].amount // finance amount
like this -
{
  "id": 64,
  "name": "",
  "amount": 100000,
  "custom_name": "Finance | Available: $100,000.00",
  "is_default": false
}


// get id for wo | user | email
const { username } = this.currentUser;
const username = this.currentUser.user;
await submitPassword(this, this.currentUser.password);
const userEmail = this.email;
const userId = this.auth.user.id;
const userId = this.currentUser.id;
testData.marketplaceBuyers.buyer1.user.id
testData.workOrders.draftWorkOrder1.workorder.id //workOrderId

const workOrderId = this.currentWorkOrder.id; // depends on `work order status should be set to 'Published'` step
// id initialization at woCommon.js
const workOrderId = await getWorkOrderIdFromUrl(this);

When I attach documents to 'v2/workorders/%{testData.workOrders.assignedWorkOrder1.workorder.id}/attachments/%{lastResponse.body.attachments.results[1].id}'

// id initialization at workOrderCreate_steps.js
this.workOrderId = await this.driver.getCurrentUrl()
  .then(url => url.match(`workorders/[0-9]+`)[0].match(`[0-9]+`)[0]); // grab and set wo id from the url

const workOrderId = this.workOrderId; // get work order id
const workOrderId = await getWorkOrderId(this, woName); // get work order id

// projects and clients
  this.testData.clients.client1.alias // client name/title
  this.testData.projects.project1.alias // project name/title
  const { id } = this.testData.projects[alias].workorder_group; // project id

//Header Information
response.response.headers.location

// mouse click in selenium
driver.actions().mouseMove(element).mouseUp().mouseDown().pe‌​rform()
or
driver.actions().mouseMove(element).click().perform()

//*******************Assertions*******************
Links:
https://www.chaijs.com/api/bdd/
https://github.com/chaijs/chai/blob/master/lib/chai/core/assertions.js

//Similar Ordered Deep Equality Assertions
expect({ a: 1 }).to.equal({ a: 1 }); // fails
expect({ a: 1 }).to.eql({ a: 1 }); // passes
expect([{a:1}, {b:2}]).to.eql([{a:1}, {b:2}]); // passes
expect([1, 2, 3]).to.deep.equal([1, 2, 3]); // passes
expect([1,2,3]).to.eql([1,2,3]); // passes
expect([1,2,3]).to.have.ordered.members([1,2,3]); // passes

//Similar Unordered Deep Equality Assertions
expect([1,2,3]).to.have.members([3,2,1]); // passes
expect([1,2,3]).to.have.members([1,2,3]); // passes
expect([1,2,3]).to.include.members([3,2,1]); // passes
expect([1,2,3,4]).to.include.members([3,2,1]); // passes, here length is not matter
expect([1,2,3,4]).to.have.members([3,2,1]); // fails, here length is matter
expect({ a: { c: 3 } }).to.include({ a: { c: 3 } }); // fails
expect({ a: { c: 3 } }).to.deep.include({ a: { c: 3 } }); // passes

//*******************End Assertions*******************
















