//ENVIRONMENT=test2 PLATFORM=chrome npm run test-only @4429bab2

//******************Data Table******************
When(/^I set reason for cancellation work order$/, async function (table) {
  const values = table.rowsHash();
  if (values.reasonForCancellation) {
    await setTextBox(
      this,
      this.pages.workOrderDetails.cancellationReasonType, values.reasonForCancellation, Key.ENTER,
    );
  }
  if (values.messageToAssignedProvider) {
    await setTextBox(
      this,
      this.pages.workOrderDetails.messageAssignedProvider, values.messageToAssignedProvider,
    );
  }
  if (values.explanationForCancellation) {
    await setTextBox(
      this,
      this.pages.workOrderDetails.explainCancellationReason, values.explanationForCancellation,
    );
  }
});

//******************End Data Table******************


//******************Events**********************

// tab click event
When(/^I click the '(.+)' tab for cancellation fees$/, async function (tabName) {
  await this.retry(async () => {
    // click the tab
    const [tab] = await this.waitFor(this.pages.cancellationFees.tab.replace(`{txt}`, tabName));
    await tab.click();
    // check for active
    await this.waitFor(`//a[contains(@class, 'selected') and contains(text(), '${tabName}')]`);
  }, 45000, 200);
  await waitForLoader(this, `//*[text()='Loading...']`);
});

// link click event
When(/^I click the '(.+)' link$/, async function (text) {
  await this.waitFor(this.pages.cancellationFees.link.replace(`{txt}`, text)).then(([el]) => el.click());
});

// select and writting events
When(/^set Create New Campaign$/, async function (table) {
  const values = table.rowsHash();
  const { newCampaign } = this.pages;
  // set title
  if (values.title) {
    await setTextBox(this, newCampaign.campaignName, values.title);
  }
  // set add invited
  if (values.add_invited) {
    await setCheckBox(this, newCampaign.addInvited, `checked`);
    const [select] = await this.waitFor(newCampaign.talentPools);
    await select.click();
    await clickElement(this, newCampaign.uncategorized);
  }
  // TODO set 'set custom registration page
  // set invite marketplace providers
  if (values.invite_marketplace_providers) {
    await clickElement(this, newCampaign.talentType);
  }
});

// button click event
When(/^I click '(.+)' button for dispute fee cancellation$/, async function (name) {
  await this.retry(async () => {
    await clickElement(this, this.pages.global.button(name));
  });
  await waitForLoader(this, `//div[@data-nw-id='Loader-container']`, { maxWaitTime: 30 }); // wait for loader to finish
});

// click and writting events
When(/^I search for '(.+)' on '(.+)' tab$/, async function (woName, tab) {
  // click tab
  // const locator = `//*[@id='CancelFeesTabs']//*[contains(text(),  '${tab}')]`;
  // const [element] = await this.waitFor(locator);
  // await element.click();

  // await waitForLoader(this, `//*[text()='Loading...']`, { maxWaitTime: 25 });

  const pageResource = this.pages.cancellationFees;

  // enter id
  const workOrderId = await getWorkOrderId(this, woName);
  await setTextBox(this, pageResource.searchRevertible, workOrderId);

  await waitForLoader(this, `//*[text()='Loading...']`);

  // click search button
  let searchLocator = '';
  if (tab === `Revertible`) {
    searchLocator = `${pageResource.searchRevertible}//following-sibling::input[@value='Search']`;
  } else if (tab === `Charged`) {
    searchLocator = `${pageResource.searchCharged}//following-sibling::input[@value='Search']`;
  } else if (tab === `Reverted`) {
    searchLocator = `${pageResource.searchReverted}//following-sibling::input[@value='Search']`;
  }
  console.log(searchLocator);
  const [searchBtn] = await this.waitFor(searchLocator);
  await searchBtn.click();
});


*** clickStoppedElement event is used when an element is animated or moving or can also be static

//******************End Events**********************


//******************Loader**********************
  await waitForLoader(this, `//*[text()='Loading...']`);
  await waitForLoader(this, `//div[@data-nw-id='Loader-container']`, { maxWaitTime: 50 }); // wait for loader to finish

//******************End Loader**********************


//******************Restfully**********************
/**
 * Cancels the given workorder
 * @example
 *
 * Given restfully cancel workorder 'assignedWorkOrder1'
 * | reason  | Customer cancelled                       |
 * | message | Sorry, customer cancelled the work order |
 */
Then(/^restfully cancel workorder '(.+)'$/, async function (woName, table) {
  const values = table.rowsHash();
  const { username } = this.currentUser;
  // get the id
  const workOrderId = await getWorkOrderId(this, woName);

  if (!username) {
    throw new Error(`Username ${this.currentUser.user} is not valid`);
  } else {
    this.lastResponse = await restfulRequest(
      this,
      {
        type: `workOrderCancel`,
        params:
              {
                woId: workOrderId,
                reason: values.reason,
                message: values.message,
              },
      }, { username },
    );
    expect(this.lastResponse.statusCode).to.equal(200);
  }
});


// by tim

/**
 * Cancels the given workorder
 * @example
 *
 * Given restfully cancel workorder 'assignedWorkOrder1'
 * | reason  | Customer cancelled                       |
 * | message | Sorry, customer cancelled the work order |
 */
Then(/^restfully cancel workorder '(.+)'$/, async function (woName, table) {
  const values = table.rowsHash();
  const { username } = this.currentUser;
  // get the id
  const workOrderId = await getWorkOrderId(this, woName); // get work order id

  if (!username) {
    throw new Error(`Username ${this.currentUser.user} is not valid`);
  } else {
    await getAccessToken(this, this.currentUser.username);
    const url = `${this.appUrl}/v2/workorders/${workOrderId}?access_token=${this.auth.access_token}`;
    const options = {
      url,
      body: {
        notes: values.reason,
        cancel_reason: 59,
        message_to_provider: values.message,
        cancel_request_not_charge: false,
        apply_passive_cancellation_fee: true,
      },
      json: true,
    };
    this.lastResponse = await rp.deleteQ(options);
    expect(this.lastResponse.statusCode).to.equal(200);
  }
});

//******************End Restfully**********************






