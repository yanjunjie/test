//ENVIRONMENT=test2 PLATFORM=chrome npm run test-only @4429bab2

//******************Data Table******************
When(/^I set reason for cancellation work order$/, async function (table) {
  const values = table.rowsHash();
  if (values.reasonForCancellation) {
    await setTextBox(
      this,
      this.pages.workOrderDetails.cancellationReasonType, values.reasonForCancellation, Key.ENTER,
    );
  }
  if (values.messageToAssignedProvider) {
    await setTextBox(
      this,
      this.pages.workOrderDetails.messageAssignedProvider, values.messageToAssignedProvider,
    );
  }
  if (values.explanationForCancellation) {
    await setTextBox(
      this,
      this.pages.workOrderDetails.explainCancellationReason, values.explanationForCancellation,
    );
  }
});

//******************End Data Table******************


//******************Events (elements.js)**********************
// select events
When(/^I set the simple work order address$/, async function (table) {
  const values = table.rowsHash();
  if (values.State) {
    await setTextBoxDropDown(this, simpleWorkPage.state, values.State);
  }
}
await setDropDown(this, this.pages.createWorkOrder.scheduleType, values.type);
setReactDropDown

// tab click event
When(/^I click the '(.+)' tab for cancellation fees$/, async function (tabName) {
  await this.retry(async () => {
    // click the tab
    const [tab] = await this.waitFor(this.pages.cancellationFees.tab.replace(`{txt}`, tabName));
    await tab.click();
    // check for active
    await this.waitFor(`//a[contains(@class, 'selected') and contains(text(), '${tabName}')]`);
  }, 45000, 200);
});

// click and text entry events
When(/^I search for '(.+)' on '(.+)' tab$/, async function (woName, tab) {
  const searchLocator = `${pageResource.searchRevertible}//following-sibling::input[@value='Search']`;
  await clickElement(this, searchLocator);

  // text entry event
  const workOrderId = await getWorkOrderId(this, woName);
  await setTextBox(this, pageResource.searchRevertible, workOrderId);
});
await setTextBox(this, pageResource.searchField, searchBy, Key.ENTER);


N.B, We should use like this
const [element] = await this.waitFor(this.pages.cancellationFees.link.replace(`{txt}`, text));
await element.click();

await world.waitFor(`//*[@class='Select-loading-zone']`, { criteria: `elementNotLocated` });
The criteria: `elementNotLocated` will wait until element is disappeared

*** clickStoppedElement event is used when an element is animated or moving or can also be static

await Promise.delay(1000); // need to wait extra to use the next textbox on same page

this.retry : This is needed when an action fails again and again 

//******************End Events**********************


//******************Loader**********************
  await waitForLoader(this, `//*[text()='Loading...']`);
  await waitForLoader(this, `//div[@data-nw-id='Loader-container']`, { maxWaitTime: 50 }); // wait for loader to finish
  waitForPageLoad
  waitStoppedElement

//******************End Loader**********************


//******************Restfully**********************
/**
 * Cancels the given workorder
 * @example
 *
 * Given restfully cancel workorder 'assignedWorkOrder1'
 * | reason  | Customer cancelled                       |
 * | message | Sorry, customer cancelled the work order |
 */
Then(/^restfully cancel workorder '(.+)'$/, async function (woName, table) {
  const values = table.rowsHash();
  const { username } = this.currentUser;
  // get the id
  const workOrderId = await getWorkOrderId(this, woName);

  if (!username) {
    throw new Error(`Username ${this.currentUser.user} is not valid`);
  } else {
    this.lastResponse = await restfulRequest(
      this,
      {
        type: `workOrderCancel`,
        params:
              {
                woId: workOrderId,
                reason: values.reason,
                message: values.message,
              },
      }, { username },
    );
    expect(this.lastResponse.statusCode).to.equal(200);
  }
});


// by tim

/**
 * Cancels the given workorder
 * @example
 *
 * Given restfully cancel workorder 'assignedWorkOrder1'
 * | reason  | Customer cancelled                       |
 * | message | Sorry, customer cancelled the work order |
 */
Then(/^restfully cancel workorder '(.+)'$/, async function (woName, table) {
  const values = table.rowsHash();
  const { username } = this.currentUser;
  // get the id
  const workOrderId = await getWorkOrderId(this, woName); // get work order id

  if (!username) {
    throw new Error(`Username ${this.currentUser.user} is not valid`);
  } else {
    await getAccessToken(this, this.currentUser.username);
    const url = `${this.appUrl}/v2/workorders/${workOrderId}?access_token=${this.auth.access_token}`;
    const options = {
      url,
      body: {
        notes: values.reason,
        cancel_reason: 59,
        message_to_provider: values.message,
        cancel_request_not_charge: false,
        apply_passive_cancellation_fee: true,
      },
      json: true,
    };
    this.lastResponse = await rp.deleteQ(options);
    expect(this.lastResponse.statusCode).to.equal(200);
  }
});

//******************End Restfully**********************


//******************User Info**********************
  const expectedProviderId = await getUserId(this, providerName);
  searchBy = await getWorkOrderId(this, alias);
  searchBy = await getWorkOrderTitle(this, alias);
//******************End User Info**********************


//******************Comparison**********************
// check the text exists or not + wait for element
  await this.waitFor(`//table[@class='payTablecss']//td[contains(text(),'${txt}')]`);

  await this.retry(async () => {
    const [myButton] = await this.waitFor(`//button[@data-nw-id='Back to Payment Terms']/parent::span/following-sibling::span/button`);
    const isEnabled = await myButton.getAttribute(`disabled`);
    await expect(isEnabled).to.be.null;
  }, 20000, 200);

include works like indexOf function in javascript
equals works for equality
//******************End Comparison**********************




