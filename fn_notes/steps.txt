//ENVIRONMENT=test2 PLATFORM=chrome npm run test-only @4429bab2

//******************Data Table******************
When(/^I set reason for cancellation work order$/, async function (table) {
  const values = table.rowsHash();
  if (values.reasonForCancellation) {
    await setTextBox(
      this,
      this.pages.workOrderDetails.cancellationReasonType, values.reasonForCancellation, Key.ENTER,
    );
  }
  if (values.messageToAssignedProvider) {
    await setTextBox(
      this,
      this.pages.workOrderDetails.messageAssignedProvider, values.messageToAssignedProvider,
    );
  }
  if (values.explanationForCancellation) {
    await setTextBox(
      this,
      this.pages.workOrderDetails.explainCancellationReason, values.explanationForCancellation,
    );
  }
});

//******************End Data Table******************


//******************Events (elements.js)**********************
// select events
When(/^I set the simple work order address$/, async function (table) {
  const values = table.rowsHash();
  if (values.State) {
    await setTextBoxDropDown(this, simpleWorkPage.state, values.State);
  }
}
await setDropDown(this, this.pages.createWorkOrder.scheduleType, values.type);
setReactDropDown

// tab click event
When(/^I click the '(.+)' tab for cancellation fees$/, async function (tabName) {
  await this.retry(async () => {
    // click the tab
    const [tab] = await this.waitFor(this.pages.cancellationFees.tab.replace(`{txt}`, tabName));
    await tab.click();
    // check for active
    await this.waitFor(`//a[contains(@class, 'selected') and contains(text(), '${tabName}')]`);
  }, 45000, 200);
});

// click and text entry events
When(/^I search for '(.+)' on '(.+)' tab$/, async function (woName, tab) {
  const searchLocator = `${pageResource.searchRevertible}//following-sibling::input[@value='Search']`;
  await clickElement(this, searchLocator);

  // text entry event
  const workOrderId = await getWorkOrderId(this, woName);
  await setTextBox(this, pageResource.searchRevertible, workOrderId);
});
await setTextBox(this, pageResource.searchField, searchBy, Key.ENTER);


N.B, We should use like this
const [element] = await this.waitFor(this.pages.cancellationFees.link.replace(`{txt}`, text));
await element.click();

await world.waitFor(`//*[@class='Select-loading-zone']`, { criteria: `elementNotLocated` });
The criteria: `elementNotLocated` will wait until element is disappeared

*** clickStoppedElement event is used when an element is animated or moving or can also be static

await Promise.delay(1000); // need to wait extra to use the next textbox on same page

this.retry => This is needed when an action fails again and again 

clickElement => only click element if it is clickable
clickStopElement => click any element which is moving or having animation. So purpose is it will wait to stop and click it
//******************End Events**********************


//******************Loader**********************
  await waitForLoader(this, `//*[text()='Loading...']`);
  await waitForLoader(this, `//div[@data-nw-id='Loader-container']`, { maxWaitTime: 50 }); // wait for loader to finish
  waitForPageLoad
  waitStoppedElement

//******************End Loader**********************


//******************Restfully**********************
/**
 * Cancels the given workorder
 * @example
 *
 * Given restfully cancel workorder 'assignedWorkOrder1'
 * | reason  | Customer cancelled                       |
 * | message | Sorry, customer cancelled the work order |
 */
Then(/^restfully cancel workorder '(.+)'$/, async function (woName, table) {
  const values = table.rowsHash();
  const { username } = this.currentUser;
  // get the id
  const workOrderId = await getWorkOrderId(this, woName);

  if (!username) {
    throw new Error(`Username ${this.currentUser.user} is not valid`);
  } else {
    this.lastResponse = await restfulRequest(
      this,
      {
        type: `workOrderCancel`,
        params:
              {
                woId: workOrderId,
                reason: values.reason,
                message: values.message,
              },
      }, { username },
    );
    expect(this.lastResponse.statusCode).to.equal(200);
  }
});


// by tim

/**
 * Cancels the given workorder
 * @example
 *
 * Given restfully cancel workorder 'assignedWorkOrder1'
 * | reason  | Customer cancelled                       |
 * | message | Sorry, customer cancelled the work order |
 */
Then(/^restfully cancel workorder '(.+)'$/, async function (woName, table) {
  const values = table.rowsHash();
  const { username } = this.currentUser;
  // get the id
  const workOrderId = await getWorkOrderId(this, woName); // get work order id

  if (!username) {
    throw new Error(`Username ${this.currentUser.user} is not valid`);
  } else {
    await getAccessToken(this, this.currentUser.username);
    const url = `${this.appUrl}/v2/workorders/${workOrderId}?access_token=${this.auth.access_token}`;
    const options = {
      url,
      body: {
        notes: values.reason,
        cancel_reason: 59,
        message_to_provider: values.message,
        cancel_request_not_charge: false,
        apply_passive_cancellation_fee: true,
      },
      json: true,
    };
    this.lastResponse = await rp.deleteQ(options);
    expect(this.lastResponse.statusCode).to.equal(200);
  }
});

//******************End Restfully**********************


//******************User Info**********************
  const expectedProviderId = await getUserId(this, providerName);
  searchBy = await getWorkOrderId(this, alias);
  searchBy = await getWorkOrderTitle(this, alias);
//******************End User Info**********************


//******************Comparison**********************
// check the text exists or not + wait for element
  await this.waitFor(`//table[@class='payTablecss']//td[contains(text(),'${txt}')]`);

  await this.retry(async () => {
    const [myButton] = await this.waitFor(`//button[@data-nw-id='Back to Payment Terms']/parent::span/following-sibling::span/button`);
    const isEnabled = await myButton.getAttribute(`disabled`);
    await expect(isEnabled).to.be.null;
  }, 20000, 200);

  include=> works like indexOf function in javascript
  equal=> works for equality

  if (values.clickSendJobRequestButton) {
    await this.retry(async () => {
      const [el] = await this.waitFor(pageResource.clickSendJobRequestButton);
      expect(await el.isEnabled()).to.equal(true);
      el.click();
    }, 20000, 200);
  }

//******************End Comparison**********************


//******************Chai**********************
expect(payAmount).to.contain(amount);

if (values.amount) {
    const actual = await getElementText(this, templateDetailsPage.amount);
    expect(actual).to.contains(values.amount);
  }

if (values.hours) {
    const actual = await getElementText(this, templateDetailsPage.hours);
    expect(actual).to.equal(values.hours);
  }

expect(thatSelectedItem).to.match(/(?:jpg|png|gif)/)

expect(pm.response.json().resources.length).to.be.above(0);

An alias of least is gte (great than or equal to). Vice versa, you can use lte (less than or equal to) to check the opposite.
So, to answer the question, you can do:
expect(percent).to.be.gte(0)

await expect(isEnabled).to.be.null;
expect(await el.isEnabled()).to.equal(true);
expect(actualTaskText).to.contains(`${values.phone} regarding ${values.regarding}`);

//******************End Chai**********************


//******************Javascript**********************
// except number remove all from string
amount = '$91.00';
amount.replace(/[^0-9.]/g, ``); // "91.00"

// only digit from string
let totalLocations = await getElementText(this, pageResource.totalLocations);
[totalLocations] = totalLocations.match(/\d+/);

// Specific fractions
let stateTaxAmount = ((serviceCharge / values.totalTexasSites) * values.stateTaxPercent) / 100;
stateTaxAmount = parseFloat(stateTaxAmount.toFixed(2));
or Number(my_float.toFixed(2));
var twoPlacedFloat = parseFloat(yourString).toFixed(2)
Here, toFiexed() returns string value


//******************End Javascript**********************


//******************Data Table**********************
// hashes() - returns object and rows are object properties
 * When I set custom field value
 * | fieldName   | fieldValue  |
 * | Buyer Field | Field value |

for (const { fieldName, fieldValue } of table.hashes()) {
  console.log(fieldName, fieldValue);
  if (fieldName === `Buyer Field`) {
    await setTextBox(this, pageResource.customFieldInput.replace(`{txt}`, fieldName), fieldValue);
  }
}

Ref: I fill out the license form

// rowsHash() - returns object and columns are object properties
* When I set custom field value
* | fieldName  | Buyer Field       |
* | fieldValue | Buyer Field value |

const values = table.rowsHash();
if (values.fieldName && values.fieldValue) {
  await setTextBox(this, pageResource.customFieldInput.replace(`{txt}`, values.fieldName), values.fieldValue);
}

//raw() - returns array and columns are array elements too
Given I start with 0
When I multiply the following numbers:
  | 1 |
  | 2 |
  | 3 |
  | 4 |
Then I got 0

this.actualAnswer = table.raw()
        .map(row => row[0])
        .map(v => parseInt(v))
        .reduce((total, val, key) => total * val, 0); //total = 0 as initial value

//rows() - returns array and rows are array elements too

//******************End Data Table**********************


// like session variable in template
const woId = await getElementText(this, `//div[contains(text(), '${woTitle}')]/parent::a//preceding::a[1]`);
this.template.workorder_template.template_data.woId = woId;
or
| title       | %{template.workorder_template.template_data.title} |



// get id for wo | user | email
const { username } = this.currentUser;
const username = this.currentUser.user;
await submitPassword(this, this.currentUser.password);
const userEmail = this.email;

const workOrderId = this.currentWorkOrder.id;
// id initialization at woCommon.js
const id = await getWorkOrderIdFromUrl(this);
this.currentWorkOrder = { id };

// id initialization at workOrderCreate_steps.js
this.workOrderId = await this.driver.getCurrentUrl()
  .then(url => url.match(`workorders/[0-9]+`)[0].match(`[0-9]+`)[0]); // grab and set wo id from the url

const workOrderId = this.workOrderId; // get work order id
const workOrderId = await getWorkOrderId(this, woName); // get work order id

// mouse click in selenium
driver.actions().mouseMove(element).mouseUp().mouseDown().pe‌​rform()
or
driver.actions().mouseMove(element).click().perform()








