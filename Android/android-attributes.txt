Common Attributes:

id="@+id/next_button"
layout_width="match_parent"
layout_width="fill_parent"
layout_height="wrap_content"
orientation="vertical"
tools:context=".MainActivity"
layout_gravity="center"
gravity="center"
layout_margin="10dp"
text="Row 6"
textSize="18sp"
layout_below="@id/firsttext"
layout_alignRight="@id/firsttext"


RelativeLayout:

Content Attributes:
android:gravity="center" for text center in TextView.
android:gravity="center_horizontal" inner text if you want horizontally centered.
android:gravity="center_vertical" inner text if you want vertically centered.
android:textSize="25sp"
android:textColor="green"

Child View Attributes:
android:layout_centerInParent="true" if you want TextView in center position relatively to parent view. 
android:layout_centerHorizontal="true" if you want TextView in horizontally center relatively to parent view. 
android:layout_centerVertical="true" if you want TextView in vertically center relatively to parent view.
android:layout_toLeftOf="@id/a" //similarly toRightOf, if you want TextView in left/right position relatively to sibling view. 
android:layout_below="@id/a" //similarly above, if you want TextView in below/above position relatively to sibling view. 
android:layout_alignParentTop="true" //similarly alignParentBottom, alignParentLeft, alignParentRight, if you want TextView in left/right position relatively to parent view. 
android:layout_marginLeft="10dp" // similarly, marginRight, marginTop, marginBottom, if you want TextView in left/right mergin relatively to parent view. 
android:layout_marginStart // similarly marginEnd. here, start and end are the same as left and right in the above mentioned
android:layout_alignTop="@id/a" //similarly, alignBottom, alignRight, alignLeft, if you want TextView in left/right position relatively to sibling view. 


GridLayout:
android:columnCount="2" is total number of rows of the Grid
android:rowCount="2" is total number of columns of the Grid

android:layout_row="1"
android:layout_column="0"

above two are a grid cell
Example:
00, 01, 02, 03
10, 11, 12, 13


android:layout_weight
android:layout_weight attribute allows it to expand to fill any remaining space in the parent view

N.B,
For vertical orientation, don't forget set height to 0dp
android:layout_height="0dp"

For horizontal orientation, don't forget set width to 0dp
android:layout_width="0dp"

android:layout_rowWeight="1"
android:layout_columnWeight="1"

above two attributes will allocate whole space as much as possible both right and bottom sides
android:layout_rowWeight="1" will take the remaining space of right side
android:layout_columnWeight="1" will take the remaining space of bottom side
and content will move to center

Constraint Layout:
For Constraint Layout Attributes:
android:layout_width="match_constraint" //0dp
app:layout_constraintWidth_default="wrap" // Similarly, constraintWidth_parcent="0.9"
app:layout_constraintWidth="true" //Text to be wrapped
app:layout_constraintWidth_min="wrap" //Similarly, max, constraintHeight
app:layout_constraintBottom_toBottomOf="parent"
app:layout_constraintLeft_toLeftOf="parent"
app:layout_constraintRight_toRightOf="parent"
app:layout_constraintTop_toTopOf="parent"
app:layout_constraintHorizontal_chainStyle="spread" //There are three possible modes: spread, spread_inside, and packed.
app:layout_constraintHorizontal_bias="0.75" //The value between 0.0 and 1.0

app:layout_constraintHorizontal_weight="1"
We can define weights by specifying android:layout_width="0dp" and then app:layout_constraintHorizontal_weight="1". If we set weight="3" that means 3 times bigger than other

Placeholder:
A Placeholder provides a virtual object which can position an existing object. When the id of another view is set on a placeholder (using setContent() ), the placeholder effectively becomes the content view.
If the content view exist on the screen it is treated as gone from its original location.
Using Placeholders to create templates and animate views




LinearLayout:
LinearLayout is a ViewGroup that aligns all children in a single direction, vertically or horizontally

android:orientation
android:layout_weight
android:weightSum
android:layout_width
android:layout_height
android:layout_gravity
android:gravity

To create a linear layout in which each child uses the same amount of space on the screen, set the android:layout_height of each view to "0dp" (for a vertical layout) 
or the android:layout_width of each view to "0dp" (for a horizontal layout). 
Then set the android:layout_weight of each view to "1".


Devide whole layout/screen 1:1 ratio either horizontal or vertical.

1st View:
android:layout_width="0dp"
android:layout_weight="1" // First View in Horizontal Orientation

2nd View:
android:layout_width="0dp"
android:layout_weight="1" // Second View in Horizontal Orientation





















