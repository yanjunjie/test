### Building Command Line Interface Apps in Node.js

### Packages For Building CLI
1. Commander.js
2. Caporal.js
3. Vorpal.js
4. Yargs.js
5. Inquirer.js
6. Gluegun.js
7. Seeli.js
8. Oclif
9. Meow
10. Inquirer

### For Colors and Utils (tables, gauges and spinners)
1. Chalk.js
2. Color.js
3. Progressbar.js
4. Figlet.js
5. Clui.js
6. Colors.js

### Others
1. mysqldump.js
2. dotenv

// Inquirer
  await inquirer.prompt([
    {
      type: 'confirm',
      name: 'confirmed',
      message: 'Continue?',
    },
  ]);


******************************// Commands********************************

You can specify (sub)commands for your top-level command using .command. There are two ways these can be implemented: using an action handler attached to the command, or as a separate executable file (described in more detail later). In the first parameter to .command you specify the command name and any command arguments. The arguments may be <required> or [optional], and the last argument may also be variadic (Parameter Pack)....

or example:

// Command implemented using action handler (description is supplied separately to `.command`)
// Returns new command for configuring.
program
  .command('clone <source> [destination]')
  .description('clone a repository into a newly created directory')
  .action((source, destination) => {
    console.log('clone command called');
  });
 
// Command implemented using separate executable file (description is second parameter to `.command`)
// Returns top-level command for adding more commands.
program
  .command('start <service>', 'start named service')
  .command('stop [service]', 'stop named service, or all if no name supplied');


*************************************// Options *************************************
Options are defined with the .option() method, also serving as documentation for the options. Each option can have a short flag (single character) and a long name, separated by a comma or space.

The options can be accessed as properties on the Command object. Multi-word options such as "--template-engine" are camel-cased, becoming program.templateEngine etc. Multiple short flags may be combined as a single arg, for example -abc is equivalent to -a -b -c.

// Common option types, boolean and value
The two most used option types are a boolean flag, and an option which takes a value (declared using angle brackets). Both are undefined unless specified on command line.

const program = require('commander');
 
program
  .option('-d, --debug', 'output extra debugging')
  .option('-s, --small', 'small pizza size')
  .option('-p, --pizza-type <type>', 'flavour of pizza');
 
program.parse(process.argv);
 
if (program.debug) console.log(program.opts());

console.log('pizza details:');
if (program.small) console.log('- small pizza size');
if (program.pizzaType) console.log(`- ${program.pizzaType}`);

// In command line write like this
$ pizza-options -d
{ debug: true, small: undefined, pizzaType: undefined }

pizza details:
$ pizza-options -p
error: option '-p, --pizza-type <type>' argument missing

$ pizza-options -ds -p vegetarian
{ debug: true, small: true, pizzaType: 'vegetarian' }

pizza details:
- small pizza size
- vegetarian

$ pizza-options --pizza-type=cheese
pizza details:
- cheese

N.B: program.parse(arguments) processes the arguments, leaving any args not consumed by the options as the program.args array.







