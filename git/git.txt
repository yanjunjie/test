
//Git Reset:
v.01
git reset --hard 0d1d7fc32

# Alternatively, if there's work to keep:
git stash
git reset --hard 0d1d7fc32
git stash pop //for delete stash
git stash apply //for use stash


v.02
To revert to a previous commit, ignoring any changes:
git reset --hard HEAD
where HEAD is the last commit in your current branch


v.03

Quick rebase: remove only a specific commit using its id:

git rebase --onto commit-id-from^ commit-id-to


Alternatives: you could also try:

git cherry-pick commit-id


[N.B]: After local resetting reset origin:

git push origin <branch_name> --force


//Git Remove origin and add new origin:

git remote rm origin
git remote add origin https://bablukpik2@bitbucket.org/bablukpik2/kyamc_mcms.git
git push -u origin master


is used to a add a new remote

//OR
git remote set-url origin git@github.com:User/UserRepo.git

is used to change the url of an existing remote repository

git push -u origin master


//Merge Commit
If there are multiple commits, you can use git rebase -i to squash two commits into one.

If there are only two commits you want to merge, and they are the "most recent two", the following commands can be used to combine the two commits into one:

git reset --soft HEAD^
git commit --amend

...OR

git reset --soft "HEAD~n"
Assuming ~n is number of commits to softly un-commit (i.e. ~1, ~2,...)
Then, use following command to modify the commit message.

git commit --amend

N.B, git reset --soft HEAD^ and git reset --soft HEAD~ are the same thing. HEAD~ and HEAD^ are synonyms and HEAD^2 means last two commits


Merge using Rebase Interactive
1. Use the git rebase -i HEAD~n command to display a list of the last n commits in your default text editor.
git rebase -i HEAD~3 # Displays a list of the last 3 commits on the current branch

2. Replace pick with Options before each commit message you want to change i.e.

pick e499d89 Delete CNAME
reword 0c39034 Better README
reword f7fde4a Change the commit message but push the same commit.

Options:
p, pick = use commit
r, reword = use commit, but edit the commit message
e, edit = use commit, but stop for amending
s, squash = use commit, but meld into previous commit
f, fixup = like "squash", but discard this commit's log message
x, exec = run command (the rest of the line) using shell

3. Forece push


// Modify Last Commit
git commit --amend -m "New commit message"

// Push a specific branch to remote
git push -u origin bablu-assignment

// Clone a specific branch from remote
git clone -b bablu-assignment <url>


// Password Save
git config credential.helper store

// delete a branch
To remove a local branch from your machine:
git branch -d {the_local_branch} (use -D instead to force deleting the branch without checking merged status)

To remove a remote branch from the server:
git push origin -d {the_remote_branch}










